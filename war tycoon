local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Fluent " .. Fluent.Version,
    SubTitle = "by M1NEGERO",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Player = Window:AddTab({ Title = "Player", Icon = "user" }),
    ESP = Window:AddTab({ Title = "ESP", Icon = "eye" }),
    Aimbot = Window:AddTab({ Title = "Aimbot", Icon = "crosshair" }),
    Teleport = Window:AddTab({ Title = "Teleport", Icon = "flag" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local teleportLocations = {
    {Title = "Point", Location = CFrame.new(100, 10, 100)},
    {Title = "Oil Barrel 1", Location = CFrame.new(200, 10, 200)},
    {Title = "Oil Barrel 2", Location = CFrame.new(300, 10, 300)},
    {Title = "Oil Barrel 3", Location = CFrame.new(400, 10, 400)},
    {Title = "Oil Barrel 4", Location = CFrame.new(500, 10, 500)}
}

for _, location in pairs(teleportLocations) do
    Tabs.Teleport:AddButton({
        Title = location.Title,
        Description = "This button teleports to " .. location.Title .. ".",
        Callback = function()
            local player = game.Players.LocalPlayer
            if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = location.Location
            end
        end
    })
end

local function createToggleButton()
    local screenGui = Instance.new("ScreenGui")
    screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

    local button = Instance.new("TextButton")
    button.Size = UDim2.new(0, 100, 0, 50)
    button.Position = UDim2.new(0, 20, 0, 20)
    button.Text = "Toggle Window"
    button.BackgroundColor3 = Color3.fromRGB(45, 45, 48)
    button.TextColor3 = Color3.fromRGB(255, 255, 255)
    button.Font = Enum.Font.SourceSansBold
    button.TextSize = 18
    button.BorderSizePixel = 0
    button.AutoButtonColor = false
    button.Parent = screenGui

    local UICorner = Instance.new("UICorner")
    UICorner.CornerRadius = UDim.new(0, 12)
    UICorner.Parent = button

    button.MouseButton1Click:Connect(function()
        Window:Minimize()
    end)
end

createToggleButton()

local aimbotLoaded = false
local aimbotScript
local aimbotToggle = Tabs.Aimbot:AddToggle("AimBotToggle", {
    Title = "AimBot",
    Description = "Toggle AimBot functionality.",
    Default = false,
    Callback = function(value)
        if value and not aimbotLoaded then
            local success, result = pcall(loadstring, game:HttpGet("https://pastebin.com/raw/xSykX9BU"))
            if success then
                aimbotScript = result()
                aimbotLoaded = true
            else
                Fluent:Notify({Title = "Error", Content = "Failed to load Aimbot: " .. result, Duration = 10})
            end
        elseif not value and aimbotLoaded then
            if aimbotScript then
                aimbotScript:Disconnect()
                aimbotScript = nil
            end
            aimbotLoaded = false
        end
    end
})

local espObjects = {}
local espTracers = {}
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera

local function createESPBox(player)
    local box = Drawing.new("Square")
    box.Thickness = 2
    box.Transparency = 0.5
    box.Color = Color3.new(1, 1, 1) -- White
    box.Filled = false
    box.Visible = false
    espObjects[player] = box
    return box
end

local function removeESPBox(player)
    if espObjects[player] then
        espObjects[player]:Remove()
        espObjects[player] = nil
    end
end

local function updateESPBox(player)
    if espObjects[player] and player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = player.Character.HumanoidRootPart
        local headPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)
        if onScreen then
            local boxHeight = 50
            local boxWidth = 30
            espObjects[player].Size = Vector2.new(boxWidth, boxHeight)
            espObjects[player].Position = Vector2.new(headPosition.X - boxWidth / 2, headPosition.Y - boxHeight / 2)
            espObjects[player].Visible = true
        else
            espObjects[player].Visible = false
        end
    end
end


local function createESPTracer(player)
    local tracer = Drawing.new("Line")
    tracer.Visible = false
    tracer.Color = Color3.new(1, 1, 1) -- White
    tracer.Thickness = 1
    tracer.Transparency = 0.5
    espTracers[player] = tracer
    return tracer
end

local function removeESPTracer(player)
    if espTracers[player] then
        espTracers[player]:Remove()
        espTracers[player] = nil
    end
end

local function updateESPTracer(player)
    if espTracers[player] and player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local humanoidRootPart = player.Character.HumanoidRootPart
        local screenPosition, onScreen = Camera:WorldToViewportPoint(humanoidRootPart.Position)

        if onScreen then
            espTracers[player].From = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 2)
            espTracers[player].To = Vector2.new(screenPosition.X, screenPosition.Y)
            espTracers[player].Visible = true
        else
            espTracers[player].Visible = false
        end
    end
end


local function enableESPBoxes(value)
    if value then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                createESPBox(player)
            end
        end
        Players.PlayerAdded:Connect(function(player)
            if player ~= Players.LocalPlayer then
                createESPBox(player)
            end
        end)
        Players.PlayerRemoving:Connect(removeESPBox)
        RunService.RenderStepped:Connect(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then
                    updateESPBox(player)
                end
            end
        end)
    else
        for player, _ in pairs(espObjects) do
            removeESPBox(player)
        end
    end
end

local function enableESPTracers(value)
    if value then
        for _, player in pairs(Players:GetPlayers()) do
            if player ~= Players.LocalPlayer then
                createESPTracer(player)
            end
        end
        Players.PlayerAdded:Connect(function(player)
            if player ~= Players.LocalPlayer then
                createESPTracer(player)
            end
        end)
        Players.PlayerRemoving:Connect(removeESPTracer)
        RunService.RenderStepped:Connect(function()
            for _, player in pairs(Players:GetPlayers()) do
                if player ~= Players.LocalPlayer then
                    updateESPTracer(player)
                end
            end
        end)
    else
        for player, _ in pairs(espTracers) do
            removeESPTracer(player)
        end
    end
end

Tabs.ESP:AddToggle("ESPBoxToggle", {
    Title = "ESP Box",
    Description = "Toggle ESP boxes for players.",
    Default = false,
    Callback = enableESPBoxes
})

Tabs.ESP:AddToggle("ESPTracerToggle", {
    Title = "ESP Tracer",
    Description = "Toggle ESP tracers for players.",
    Default = false,
    Callback = enableESPTracers
})

local speedSlider = Tabs.Player:AddSlider("SpeedSlider", {
    Title = "Speed Multiplier (Visual Only)",
    Description = "This slider only changes a visual value; it does not affect actual player speed.",
    Min = 0.1,
    Max = 2,
    Default = 1,
    Step = 0.1,
    Callback = function(value)
        print("Speed Multiplier set to: " .. value)
    end
})

SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)

SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")

InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "War Tycoon",
    Content = "The script has been loaded.",
    Duration = 8
})

SaveManager:LoadAutoloadConfig()
